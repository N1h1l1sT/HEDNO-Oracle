<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="mnuMain.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>8, -1</value>
  </metadata>
  <data name="mniGeoLocate.ToolTipText" xml:space="preserve">
    <value>Needs: An active connection to the SQL Server, the 'Final Dataset' SQL View, the Geolocation Columns and a Valid Google Geolocation API Key.
Does: Iterates over every project in the 'Final Dataset' SQL View and Geo-Locates them using Google Geolocation.</value>
  </data>
  <data name="mniGeoLocationStatus.ToolTipText" xml:space="preserve">
    <value>Needs: An active connection to the SQL Server, the 'Final Dataset' SQL View and the Geolocation Columns.
Does: Shows a message box giving you information on:
1) Total Project Rows
2) Number of projects which have successfully been Geo-located
3) Number of projects which Geo-Location has not been executed yet
4) Number of projects which Geo-Location failed
5) Number of Addressed that said failed projects are comprised of</value>
  </data>
  <data name="mniExportListofProblematicAddresses.ToolTipText" xml:space="preserve">
    <value>Needs: An active connection to the SQL Server, the 'Final Dataset' SQL View and the Geolocation Columns.
Does: Creates and opens a .csv containing in alphabetic order all the addresses/cities which Google's Geo-Location failed to Geolocate.
*One can then fill in a google-maps recognisable name for the address/city save it as 'Cities.csv' in the 'Extras' directory.
*The programme will then be able to Geolocate those previously failed projects as well.</value>
  </data>
  <data name="mniResetInvalidGeolocationEntries.ToolTipText" xml:space="preserve">
    <value>When Google's Geolocation service fails to geo-locate a project, its Longitude and Latitude are marked as -1 to be ignored afterwards.
However, if you've exported and configured the list of Problematic Addresses, you need to reset the Invalid Geolocation Entries so that the programme tries to geolocate them anew</value>
  </data>
  <data name="mniPreProcessTheData.ToolTipText" xml:space="preserve">
    <value>Opens the PreProcessing form where you may:
*Apply the pre-processing procedure to the dataset, creating an XDF output file.
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.
*View the Geo-Location Graph as of Pre-Processing's point of view (may contain erroneous latitudes/longitudes outside Greece's region)</value>
  </data>
  <data name="mniClusteringStep0.ToolTipText" xml:space="preserve">
    <value>Opens the ClusteringStep0 form where you may:
*Create the Clustering dataset containing only projects with Longitudes/Latitudes inside Greece's region, outputting it into an XDF file.
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.
*View the Geo-Location Graph as of Clustering Step 0's point of view (no clusters or colour-coding as of yet)</value>
  </data>
  <data name="mniClusteringStep1.ToolTipText" xml:space="preserve">
    <value>Opens the ClusteringStep0 form where you may:
*Apply Clustering to the Clustering dataset , outputting it into an XDF file.
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.
*View the Geo-Location Graph as of Clustering Step 1's point of view (Clear Clusters with colour-coding)</value>
  </data>
  <data name="mniFormTrainAndTestSets.ToolTipText" xml:space="preserve">
    <value>Opens the Classification form where you may:
*Create the Classification dataset in one of 2 ways:
--With a n% of data marked for Training and 100-n% percent for Testing purposes.
--With all projects with a clear label (Approved/Cancelled) for training, and all those who have not for Testing/Classification
*Form the Training XDF file
*Form the Testing XDF file
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.
*View a Data Summary of the Training Dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.
*View a Data Summary of the Testing Dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.</value>
  </data>
  <data name="mniLogisticRegression.ToolTipText" xml:space="preserve">
    <value>Opens the LogisticRegression form where you may:
*Train a Logistic Regression model using R's rxLogit algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: covCoef</value>
  </data>
  <data name="mniDecisionTrees.ToolTipText" xml:space="preserve">
    <value>Opens the DecisionTrees form where you may:
*Train a Decision Tree model using R's rxDTree algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: Plot Tree Model, Classification Method, Show Complexity Plot, cp</value>
  </data>
  <data name="mniNaiveBayes.ToolTipText" xml:space="preserve">
    <value>Opens the NaiveBayes form where you may:
*Train a Naive Bayes model using R's rxNaiveBayes algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)</value>
  </data>
  <data name="mniRandomForest.ToolTipText" xml:space="preserve">
    <value>Opens the RandomForest  form where you may:
*Train a Random Forest model using R's rxDForest algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: Plot Variables Importance, Classification Method, Out-of-bags Error VS nTree Plot, cp, nTree, mTry, MaxDepth</value>
  </data>
  <data name="mniStochasticGradientBoosting.ToolTipText" xml:space="preserve">
    <value>Opens the StochasticGradientBoosting form where you may:
*Train a Stochastic Gradient Boosting model using R's rxBTrees algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: nTree, mTry, maxDepth, cp, lossFunction, Plot Variables Importance, Out-of-bags Error VS nTree Plot</value>
  </data>
  <data name="mniStochasticDualCoordinateAscent.ToolTipText" xml:space="preserve">
    <value>Opens the StochasticDualCoordinateAscent form where you may:
*Train a Stochastic Dual Coordinate Ascent model using R's rxFastLinear algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: type, normalize, convergenceTolerance</value>
  </data>
  <data name="mniBoostedDecisionTrees.ToolTipText" xml:space="preserve">
    <value>Opens the BoostedDecisionTrees form where you may:
*Train a Boosted Decision Trees model using R's rxFastTrees algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: unbalancedSets, numTrees, numLeaves, gainConfLevel</value>
  </data>
  <data name="mniEnsambleOfDecisionTrees.ToolTipText" xml:space="preserve">
    <value>Opens the EnsambleofDecisionTrees form where you may:
*Train a Ensamble of Decision Trees model using R's rxFastForest algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: type, numTrees, numLeaves, gainConfLevel</value>
  </data>
  <data name="mniNeuralNetworks.ToolTipText" xml:space="preserve">
    <value>Opens the NeuralNetworks form where you may:
*Train a Neural Networks model using R's rxNeuralNet algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: numHiddenNodes, numIterations, acceleration, normalize</value>
  </data>
  <data name="mniFastLogisticRegression.ToolTipText" xml:space="preserve">
    <value>Opens the Fast Logistic Regression form where you may:
*Train a Fast Logistic Regression model using R's rxLogisticRegression algorithm
*Make prediction on the Testing File
*Save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*View a Data Summary of the dataset, such as Min, Max, Mean, etc.
*View Variable Information such as their types and descriptions.

[Enable/Disable Statistics Mode]
If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--View Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--Show model's ROC Curve with AUC calculated value
Otherwise
--Exports the predictions of unlabelled projects into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)

*Ability to tweak Algorithm-Specific Options, such as: sgdInitTol, l2Weight, l1Weight, optTol, memorySize, initWtsScale, maxIterations</value>
  </data>
  <metadata name="tmrUnknownCmd.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>98, 3</value>
  </metadata>
  <metadata name="tmrMinimizationDelay.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>230, 3</value>
  </metadata>
  <metadata name="TrayIcon.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>402, 3</value>
  </metadata>
  <metadata name="TraySetting.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>500, 3</value>
  </metadata>
  <metadata name="tltMain.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>613, 3</value>
  </metadata>
  <metadata name="fswSettings.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>700, 2</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>28</value>
  </metadata>
  <metadata name="tmrHideReEnable.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>808, 3</value>
  </metadata>
  <metadata name="tmrUpdatePB.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>938, 3</value>
  </metadata>
  <metadata name="tmrFunctInProgress.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1054, 3</value>
  </metadata>
</root>