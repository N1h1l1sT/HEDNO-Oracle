<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ttMain.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>418, 6</value>
  </metadata>
  <data name="chkStatisticsMode.ToolTip" xml:space="preserve">
    <value>[Transparent background means a new Model will be trained, so it can be either in Statistics Mode or not]

[If the CheckBox is Checked:]
[Red background means that the existing Training/Testing XDF files are not marked for statistics, hence by checking this, the statistics will be nonsense or fail altogether]
[Green background means that the existing XDF is marked for statistics]

[If the CheckBox is Not Checked:]
[Red background means that the existing Training/Testing XDF files are marked for statistics, hence by not checking it, you strip yourself from the option to perform statistics]
[Green background means that the existing XDF is not marked for statistics]
</value>
  </data>
  <data name="chkUseExistingModel.ToolTip" xml:space="preserve">
    <value>Instead of Training the model, a previously saved model is loaded.
Using an existing model is faster, but beware that if the data changes significantly (in particular, if the Factor Level Order changes), then the whole procedure will fail!
In that case, please just uncheck this CheckBox to create the model anew.</value>
  </data>
  <data name="txtNGrams.ToolTip" xml:space="preserve">
    <value>Type a n-grams to perform with the variables.
If, for instance, variables '1', '2', and '3' are selected above, then
*a 1-gram will produce 3 results (1, 2, 3)
*a 2-gram will produce 3 results (1-2, 1-3, 2-3)
*whilst a 3-gram will produce 1 result (1-2-3)</value>
  </data>
  <data name="chkUpToNGramsN.ToolTip" xml:space="preserve">
    <value>If selected, then not only will combination iterate over selected columns, but also for n = 1 to n-gram's n.
If, for instance, 3 columns are selected and n-gram is set to 3, then 7 results will be produced:
1,
2,
3,
1-2,
1-3,
2-3
1-2-3
</value>
  </data>
  <data name="chkColumnsCombinations.ToolTip" xml:space="preserve">
    <value>Instead of Training only 1 model with selected columns above, use n-grams to produce multiple combinations for them (according to n'-gram's n set above) and train multiple models, 1 for each combination</value>
  </data>
  <data name="btnRunModel.ToolTip" xml:space="preserve">
    <value>Trains a Naive Bayes model using R's rxNaiveBayes algorithm and according to the Algorithm-Specific Options selected, or loads an existing model if 'Use Existing Model' is checked
*If 'Make Predictions' is selected, it makes prediction on the Testing File
*If 'Save Prediction Model' is checked, it save the trained model in a file using R's RDS format which can then be used to import the trained model into this programme or to an R client
*If 'Show Data Summary' is checked, you can view a Data Summary of the Classification dataset, such as Min, Max, Mean, etc.
*If 'Show Variable Information' is checked, you can view Variable Information such as their types and descriptions.

If the dataset is created using Statistics Mode (i.e. n% of labelled data for Training and 100-n% for Testing:
--If 'Show Statistics' is checked, you can view Model's statistics, such as Confusion Matrix, Accuracy, F Measure, G, etc.
--If 'Show ROC Curve' is checked, the model's ROC Curve with AUC value is plotted
Otherwise
--The predictions are exported into a .csv containing: 1) Their respective SQL Server project ID, 2) Their Probability of being approved, 3) Their Class (0/1)</value>
  </data>
  <data name="chkOpenGraphDirectory.ToolTip" xml:space="preserve">
    <value>Because R.NET does not support multiple Graph Plots simultaneously, when predictions from multiple models are applied, the ROC Curve plots are saved as .png files.
If this option is checked, the containing folder is opened when the procedure comes to an end.</value>
  </data>
  <metadata name="fbdModelPath.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>4, 6</value>
  </metadata>
  <metadata name="tmrLoadColumns.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>133, 6</value>
  </metadata>
  <metadata name="fswModelFileExists.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>281, 6</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>29</value>
  </metadata>
  <metadata name="fswXDFFileExists.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>491, 5</value>
  </metadata>
  <metadata name="tmrXDFExists.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>627, 5</value>
  </metadata>
  <metadata name="fswTrainAndTest.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>739, 5</value>
  </metadata>
</root>