<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ttMain.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>259, 4</value>
  </metadata>
  <data name="chkStatisticsMode.ToolTip" xml:space="preserve">
    <value>[Transparent background means a new Classification XDF file will be created from the Clustering XDF, so its mode should be the same as the Clustering dataset]

[If the CheckBox is Checked:]
[Red background means that the existing Classification XDF is not marked for statistics, hence by checking this, the algorithm will be unable to separate the Training data because it'll search for the wrong variable]
[Green background means that the existing Classification XDF is marked for statistics]

[If the CheckBox is Not Checked:]
[Red background means that the existing Classification XDF is marked for statistics, hence by not checking, the algorithm will be unable to separate the Training data because it'll search for the wrong variable]
[Green background means that the existing Classification XDF is not marked for statistics]</value>
  </data>
  <data name="chkFormTestSet.ToolTip" xml:space="preserve">
    <value>Uses the newly created or existing Classification XDF file to separate projects marked for Testing exporting them into a new Testing XDF file.
If Statistics Mode is checked, then the variable used to separate the Testing set is 'SelectionRatio', whilst if it isn't the variable used is 'MarkedForTest'
If the Classification file was created in Statistics mode and you try to form the Testing set in Non-Statistics Mode, then the process will fail because of the difference in selection variables
Same thing applies to Classification file created in Non-Statistics mode and trying to form the Testing Set in Statistics Mode.</value>
  </data>
  <data name="chkFormTrainSet.ToolTip" xml:space="preserve">
    <value>Uses the newly created or existing Classification XDF file to separate projects marked for Training exporting them into a new Training XDF file.
If Statistics Mode is checked, then the variable used to separate the Training set is 'SelectionRatio', whilst if it isn't the variable used is 'MarkedForTest'
If the Classification file was created in Statistics mode and you try to form the Training set in Non-Statistics Mode, then the process will fail because of the difference in selection variables
Same thing applies to Classification file created in Non-Statistics mode and trying to form the Training Set in Statistics Mode.</value>
  </data>
  <data name="chkUseExistingXDFFile.ToolTip" xml:space="preserve">
    <value>[Red background means that an existing Classification XDF file cannot be located or is unreachable]
[Green background means that an existing Classification XDF file is located and is unreachable]
Instead of Creating the Classification XDF file file by manipulating data from the Clustering Dataset, the file that's been saved in a previous session is used</value>
  </data>
  <data name="btnClassification.ToolTip" xml:space="preserve">
    <value>Needs: R Server or equivalent, an active connection to the SQL Server from R (i.e. valid R SQL Connection String)
Does: Processes the data in the Clustering XFD, exporting an XDF file featuring the Classification Dataset according to selected options
--If Statistics Mode is checked, then only the clearly labelled projects will be used, according to the percentage you specified on 'Training Set Percentage" ComboBox
--Otherwise all clearly labelled data will be marked for the Training set and all pending projects without a label will be marked for the Testing/Prediction set.
*If 'Form Training Set' is checked, then all projects marked as Training will be exported into a Training XDF file
*If 'Form Testing Set' is checked, then all projects marked as Testing will be exported into a Testing XDF file
*If 'Show Data Summary' is checked, a Data Summary View of the Classification dataset is shown, containing features such as Min, Max, Mean, etc.
*If 'Show Variable Information' is checked, a Variable Information View is shown, containing features such as their types and descriptions.
*If 'Show Training Data Summary' is checked, a Data Summary View of the Training dataset is shown, containing features such as Min, Max, Mean, etc.
*If 'Show Training Variable Information' is checked, a Variable Information View is shown, containing features such as their types and descriptions.
*If 'Show Testing Data Summary' is checked, a Data Summary View of the Testing dataset is shown, containing features such as Min, Max, Mean, etc.
*If 'Show Testing Variable Information' is checked, a Variable Information View is shown, containing features such as their types and descriptions.</value>
  </data>
  <metadata name="fswModelExists.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>2, 2</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>31</value>
  </metadata>
  <metadata name="tmrModelExists.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>131, 2</value>
  </metadata>
</root>